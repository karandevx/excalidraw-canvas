{"ast":null,"code":"var _jsxFileName = \"/Users/karandesai/Downloads/excalidraw/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport { exportToClipboard, Excalidraw, useHandleLibrary, MIME_TYPES, sceneCoordsToViewportCoords, viewportCoordsToSceneCoords, restoreElements, LiveCollaborationTrigger, MainMenu } from \"@excalidraw/excalidraw\";\nimport ExampleSidebar from \"./sidebar/ExampleSidebar\";\nimport \"./App.scss\";\nimport initialData from \"./initialData\";\nimport { nanoid } from \"nanoid\";\nimport MobileFooter from \"./MobileFooter\";\nimport { resolvablePromise, withBatchedUpdates, withBatchedUpdatesThrottled, distance2d } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// This is so that we use the bundled excalidraw.development.js file instead\n// of the actual source code\nconst COMMENT_ICON_DIMENSION = 32;\nconst COMMENT_INPUT_HEIGHT = 50;\nconst COMMENT_INPUT_WIDTH = 150;\nexport default function App() {\n  _s();\n  var _pointerData$pointer$, _pointerData$pointer$2;\n  const appRef = useRef(null);\n  const [viewModeEnabled, setViewModeEnabled] = useState(false);\n  const [zenModeEnabled, setZenModeEnabled] = useState(false);\n  const [gridModeEnabled, setGridModeEnabled] = useState(false);\n  const [blobUrl, setBlobUrl] = useState(\"\");\n  const [canvasUrl, setCanvasUrl] = useState(\"\");\n  const [exportWithDarkMode, setExportWithDarkMode] = useState(false);\n  const [exportEmbedScene, setExportEmbedScene] = useState(false);\n  const [theme, setTheme] = useState(\"light\");\n  const [isCollaborating, setIsCollaborating] = useState(false);\n  const [commentIcons, setCommentIcons] = useState({});\n  const [comment, setComment] = useState(null);\n  const initialStatePromiseRef = useRef({\n    promise: null\n  });\n  if (!initialStatePromiseRef.current.promise) {\n    initialStatePromiseRef.current.promise = resolvablePromise();\n  }\n  const [excalidrawAPI, setExcalidrawAPI] = useState(null);\n  useHandleLibrary({\n    excalidrawAPI\n  });\n  useEffect(() => {\n    if (!excalidrawAPI) {\n      return;\n    }\n    const fetchData = async () => {\n      const res = await fetch(\"/rocket.jpeg\");\n      const imageData = await res.blob();\n      const reader = new FileReader();\n      reader.readAsDataURL(imageData);\n      reader.onload = function () {\n        const imagesArray = [{\n          id: \"rocket\",\n          dataURL: reader.result,\n          mimeType: MIME_TYPES.jpg,\n          created: 1644915140367,\n          lastRetrieved: 1644915140367\n        }];\n\n        //@ts-ignore\n        initialStatePromiseRef.current.promise.resolve(initialData);\n        excalidrawAPI.addFiles(imagesArray);\n      };\n    };\n    fetchData();\n  }, [excalidrawAPI]);\n  const renderTopRightUI = isMobile => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [!isMobile && /*#__PURE__*/_jsxDEV(LiveCollaborationTrigger, {\n        isCollaborating: isCollaborating,\n        onSelect: () => {\n          window.alert(\"Collab dialog clicked\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alert(\"This is dummy top right UI\"),\n        style: {\n          height: \"2.5rem\"\n        },\n        children: [\" \", \"Click me\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  const updateScene = () => {\n    const sceneData = {\n      elements: restoreElements([], null),\n      appState: {\n        //   viewBackgroundColor: \"#edf2ff\"\n      }\n    };\n    excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.updateScene(sceneData);\n  };\n  const onLinkOpen = useCallback((element, event) => {\n    const link = element.link;\n    const {\n      nativeEvent\n    } = event.detail;\n    const isNewTab = nativeEvent.ctrlKey || nativeEvent.metaKey;\n    const isNewWindow = nativeEvent.shiftKey;\n    const isInternalLink = link.startsWith(\"/\") || link.includes(window.location.origin);\n    if (isInternalLink && !isNewTab && !isNewWindow) {\n      // signal that we're handling the redirect ourselves\n      event.preventDefault();\n      // do a custom redirect, such as passing to react-router\n      // ...\n    }\n  }, []);\n  const onCopy = async type => {\n    if (!excalidrawAPI) {\n      return false;\n    }\n    await exportToClipboard({\n      elements: excalidrawAPI.getSceneElements(),\n      appState: excalidrawAPI.getAppState(),\n      files: excalidrawAPI.getFiles(),\n      type\n    });\n    window.alert(\"Copied to clipboard as \".concat(type, \" successfully\"));\n  };\n  const [pointerData, setPointerData] = useState(null);\n  const onPointerDown = (activeTool, pointerDownState) => {\n    if (activeTool.type === \"custom\" && activeTool.customType === \"comment\") {\n      const {\n        x,\n        y\n      } = pointerDownState.origin;\n      setComment({\n        x,\n        y,\n        value: \"\"\n      });\n    }\n  };\n  const rerenderCommentIcons = () => {\n    if (!excalidrawAPI) {\n      return false;\n    }\n    const commentIconsElements = appRef.current.querySelectorAll(\".comment-icon\");\n    commentIconsElements.forEach(ele => {\n      const id = ele.id;\n      const appstate = excalidrawAPI.getAppState();\n      const {\n        x,\n        y\n      } = sceneCoordsToViewportCoords({\n        sceneX: commentIcons[id].x,\n        sceneY: commentIcons[id].y\n      }, appstate);\n      ele.style.left = \"\".concat(x - COMMENT_ICON_DIMENSION / 2 - appstate.offsetLeft, \"px\");\n      ele.style.top = \"\".concat(y - COMMENT_ICON_DIMENSION / 2 - appstate.offsetTop, \"px\");\n    });\n  };\n  const onPointerMoveFromPointerDownHandler = pointerDownState => {\n    return withBatchedUpdatesThrottled(event => {\n      if (!excalidrawAPI) {\n        return false;\n      }\n      const {\n        x,\n        y\n      } = viewportCoordsToSceneCoords({\n        clientX: event.clientX - pointerDownState.hitElementOffsets.x,\n        clientY: event.clientY - pointerDownState.hitElementOffsets.y\n      }, excalidrawAPI.getAppState());\n      setCommentIcons({\n        ...commentIcons,\n        [pointerDownState.hitElement.id]: {\n          ...commentIcons[pointerDownState.hitElement.id],\n          x,\n          y\n        }\n      });\n    });\n  };\n  const onPointerUpFromPointerDownHandler = pointerDownState => {\n    return withBatchedUpdates(event => {\n      window.removeEventListener(\"pointermove\", pointerDownState.onMove);\n      window.removeEventListener(\"pointerup\", pointerDownState.onUp);\n      excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.setActiveTool({\n        type: \"selection\"\n      });\n      const distance = distance2d(pointerDownState.x, pointerDownState.y, event.clientX, event.clientY);\n      if (distance === 0) {\n        if (!comment) {\n          setComment({\n            x: pointerDownState.hitElement.x + 60,\n            y: pointerDownState.hitElement.y,\n            value: pointerDownState.hitElement.value,\n            id: pointerDownState.hitElement.id\n          });\n        } else {\n          setComment(null);\n        }\n      }\n    });\n  };\n  const saveComment = () => {\n    if (!comment) {\n      return;\n    }\n    if (!comment.id && !comment.value) {\n      setComment(null);\n      return;\n    }\n    const id = comment.id || nanoid();\n    setCommentIcons({\n      ...commentIcons,\n      [id]: {\n        x: comment.id ? comment.x - 60 : comment.x,\n        y: comment.y,\n        id,\n        value: comment.value\n      }\n    });\n    setComment(null);\n  };\n  const renderCommentIcons = () => {\n    return Object.values(commentIcons).map(commentIcon => {\n      if (!excalidrawAPI) {\n        return false;\n      }\n      const appState = excalidrawAPI.getAppState();\n      const {\n        x,\n        y\n      } = sceneCoordsToViewportCoords({\n        sceneX: commentIcon.x,\n        sceneY: commentIcon.y\n      }, excalidrawAPI.getAppState());\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: commentIcon.id,\n        style: {\n          top: \"\".concat(y - COMMENT_ICON_DIMENSION / 2 - appState.offsetTop, \"px\"),\n          left: \"\".concat(x - COMMENT_ICON_DIMENSION / 2 - appState.offsetLeft, \"px\"),\n          position: \"absolute\",\n          zIndex: 1,\n          width: \"\".concat(COMMENT_ICON_DIMENSION, \"px\"),\n          height: \"\".concat(COMMENT_ICON_DIMENSION, \"px\"),\n          cursor: \"pointer\",\n          touchAction: \"none\"\n        },\n        className: \"comment-icon\",\n        onPointerDown: event => {\n          event.preventDefault();\n          if (comment) {\n            commentIcon.value = comment.value;\n            saveComment();\n          }\n          const pointerDownState = {\n            x: event.clientX,\n            y: event.clientY,\n            hitElement: commentIcon,\n            hitElementOffsets: {\n              x: event.clientX - x,\n              y: event.clientY - y\n            }\n          };\n          const onPointerMove = onPointerMoveFromPointerDownHandler(pointerDownState);\n          const onPointerUp = onPointerUpFromPointerDownHandler(pointerDownState);\n          window.addEventListener(\"pointermove\", onPointerMove);\n          window.addEventListener(\"pointerup\", onPointerUp);\n          pointerDownState.onMove = onPointerMove;\n          pointerDownState.onUp = onPointerUp;\n          excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.setActiveTool({\n            type: \"custom\",\n            customType: \"comment\"\n          });\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-avatar\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"doremon.png\",\n            alt: \"doremon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)\n      }, commentIcon.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const renderComment = () => {\n    if (!comment) {\n      return null;\n    }\n    const appState = excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.getAppState();\n    const {\n      x,\n      y\n    } = sceneCoordsToViewportCoords({\n      sceneX: comment.x,\n      sceneY: comment.y\n    }, appState);\n    let top = y - COMMENT_ICON_DIMENSION / 2 - appState.offsetTop;\n    let left = x - COMMENT_ICON_DIMENSION / 2 - appState.offsetLeft;\n    if (top + COMMENT_INPUT_HEIGHT < appState.offsetTop + COMMENT_INPUT_HEIGHT) {\n      top = COMMENT_ICON_DIMENSION / 2;\n    }\n    if (top + COMMENT_INPUT_HEIGHT > appState.height) {\n      top = appState.height - COMMENT_INPUT_HEIGHT - COMMENT_ICON_DIMENSION / 2;\n    }\n    if (left + COMMENT_INPUT_WIDTH < appState.offsetLeft + COMMENT_INPUT_WIDTH) {\n      left = COMMENT_ICON_DIMENSION / 2;\n    }\n    if (left + COMMENT_INPUT_WIDTH > appState.width) {\n      left = appState.width - COMMENT_INPUT_WIDTH - COMMENT_ICON_DIMENSION / 2;\n    }\n    return /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"comment\",\n      style: {\n        top: \"\".concat(top, \"px\"),\n        left: \"\".concat(left, \"px\"),\n        position: \"absolute\",\n        zIndex: 1,\n        height: \"\".concat(COMMENT_INPUT_HEIGHT, \"px\"),\n        width: \"\".concat(COMMENT_INPUT_WIDTH, \"px\")\n      },\n      ref: ref => {\n        setTimeout(() => ref === null || ref === void 0 ? void 0 : ref.focus());\n      },\n      placeholder: comment.value ? \"Reply\" : \"Comment\",\n      value: comment.value,\n      onChange: event => {\n        setComment({\n          ...comment,\n          value: event.target.value\n        });\n      },\n      onBlur: saveComment,\n      onKeyDown: event => {\n        if (!event.shiftKey && event.key === \"Enter\") {\n          event.preventDefault();\n          saveComment();\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSidebar = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    // <Sidebar>\n    //   <Sidebar.Header>Custom header!</Sidebar.Header>\n    //   Custom sidebar!\n    // </Sidebar>\n    ;\n  };\n\n  const handleDrop = useCallback(async event => {\n    event.preventDefault();\n    const files = event.dataTransfer.files;\n    if (files.length > 0) {\n      const file = files[0];\n      if (file.type.startsWith(\"image/\")) {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function () {\n          const imagesArray = [{\n            id: file.name,\n            // Type assertion here\n            dataURL: reader.result,\n            mimeType: file.type,\n            created: Date.now(),\n            lastRetrieved: Date.now()\n          }];\n\n          // Add the image to the Excalidraw canvas\n          excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.addFiles(imagesArray);\n        };\n      }\n    }\n  }, [excalidrawAPI]);\n  useEffect(() => {\n    const canvasWrapper = appRef.current.querySelector(\".excalidraw-wrapper\");\n    console.log(\"effect\");\n    // Listen for drop events on the canvas\n    canvasWrapper.addEventListener(\"drop\", handleDrop);\n\n    // Prevent default behavior for drag-and-drop to allow dropping files\n    canvasWrapper.addEventListener(\"dragover\", event => {\n      event.preventDefault();\n    });\n\n    // Cleanup event listeners on component unmount\n    return () => {\n      canvasWrapper.removeEventListener(\"drop\", handleDrop);\n      canvasWrapper.removeEventListener(\"dragover\", event => {\n        event.preventDefault();\n      });\n    };\n  }, [handleDrop]);\n\n  // ... (rest of the existing code)\n\n  const renderMenu = () => {\n    return /*#__PURE__*/_jsxDEV(MainMenu, {\n      children: [/*#__PURE__*/_jsxDEV(MainMenu.DefaultItems.SaveAsImage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.DefaultItems.Export, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.Separator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.Group, {\n        title: \"Excalidraw links\",\n        children: /*#__PURE__*/_jsxDEV(MainMenu.DefaultItems.Socials, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.Separator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.ItemCustom, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            height: \"2rem\"\n          },\n          onClick: () => window.alert(\"custom menu item\"),\n          children: \"custom item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.DefaultItems.Help, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), excalidrawAPI && /*#__PURE__*/_jsxDEV(MobileFooter, {\n        excalidrawAPI: excalidrawAPI\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: appRef,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"HTML canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExampleSidebar, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"update-scene\",\n          onClick: updateScene,\n          children: \"Update Canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-scene\",\n          onClick: () => {\n            excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.resetScene();\n          },\n          children: \"Reset Canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: viewModeEnabled,\n            onChange: () => setViewModeEnabled(!viewModeEnabled)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 13\n          }, this), \"View mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: gridModeEnabled,\n            onChange: () => setGridModeEnabled(!gridModeEnabled)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 13\n          }, this), \"Grid mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: theme === \"dark\",\n            onChange: () => {\n              let newTheme = \"light\";\n              if (theme === \"light\") {\n                newTheme = \"dark\";\n              }\n              setTheme(newTheme);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 13\n          }, this), \"Switch to Dark Theme\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCopy.bind(null, \"png\"),\n          children: \"Copy to Clipboard as PNG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCopy.bind(null, \"svg\"),\n          children: \"Copy to Clipboard as SVG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCopy.bind(null, \"json\"),\n          children: \"Copy to Clipboard as JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: \"1em\",\n            justifyContent: \"center\",\n            marginTop: \"1em\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"x: \", (_pointerData$pointer$ = pointerData === null || pointerData === void 0 ? void 0 : pointerData.pointer.x) !== null && _pointerData$pointer$ !== void 0 ? _pointerData$pointer$ : 0]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"y: \", (_pointerData$pointer$2 = pointerData === null || pointerData === void 0 ? void 0 : pointerData.pointer.y) !== null && _pointerData$pointer$2 !== void 0 ? _pointerData$pointer$2 : 0]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parentDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"excalidraw-wrapper\",\n          onDrop: handleDrop,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: \"absolute\",\n              left: \"50%\",\n              bottom: \"20px\",\n              display: \"flex\",\n              zIndex: 9999999999999999,\n              padding: \"5px 10px\",\n              transform: \"translateX(-50%)\",\n              background: \"rgba(255, 255, 255, 0.8)\",\n              gap: \"1rem\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Excalidraw, {\n            ref: api => setExcalidrawAPI(api),\n            initialData: initialStatePromiseRef.current.promise,\n            onChange: (elements, state) => {\n              console.info(\"Elements :\", elements, \"State : \", state);\n            },\n            onPointerUpdate: payload => setPointerData(payload),\n            viewModeEnabled: viewModeEnabled,\n            zenModeEnabled: zenModeEnabled,\n            gridModeEnabled: gridModeEnabled,\n            theme: theme,\n            name: \"Custom name of drawing\",\n            UIOptions: {\n              canvasActions: {\n                loadScene: false\n              }\n            }\n            // renderTopRightUI={renderTopRightUI}\n            ,\n            onLinkOpen: onLinkOpen,\n            onPointerDown: onPointerDown,\n            onScrollChange: rerenderCommentIcons\n            // renderSidebar={renderSidebar}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this), Object.keys(commentIcons || []).length > 0 && renderCommentIcons(), comment && renderComment()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"messi.png\",\n            alt: \"messi\",\n            style: {\n              height: \"200px\",\n              width: \"240px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 529,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"B9bpavPzLVKiFYquniHHQhfmv/A=\", false, function () {\n  return [useHandleLibrary];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","exportToClipboard","Excalidraw","useHandleLibrary","MIME_TYPES","sceneCoordsToViewportCoords","viewportCoordsToSceneCoords","restoreElements","LiveCollaborationTrigger","MainMenu","ExampleSidebar","initialData","nanoid","MobileFooter","resolvablePromise","withBatchedUpdates","withBatchedUpdatesThrottled","distance2d","jsxDEV","_jsxDEV","Fragment","_Fragment","COMMENT_ICON_DIMENSION","COMMENT_INPUT_HEIGHT","COMMENT_INPUT_WIDTH","App","_s","_pointerData$pointer$","_pointerData$pointer$2","appRef","viewModeEnabled","setViewModeEnabled","zenModeEnabled","setZenModeEnabled","gridModeEnabled","setGridModeEnabled","blobUrl","setBlobUrl","canvasUrl","setCanvasUrl","exportWithDarkMode","setExportWithDarkMode","exportEmbedScene","setExportEmbedScene","theme","setTheme","isCollaborating","setIsCollaborating","commentIcons","setCommentIcons","comment","setComment","initialStatePromiseRef","promise","current","excalidrawAPI","setExcalidrawAPI","fetchData","res","fetch","imageData","blob","reader","FileReader","readAsDataURL","onload","imagesArray","id","dataURL","result","mimeType","jpg","created","lastRetrieved","resolve","addFiles","renderTopRightUI","isMobile","children","onSelect","window","alert","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","height","updateScene","sceneData","elements","appState","onLinkOpen","element","event","link","nativeEvent","detail","isNewTab","ctrlKey","metaKey","isNewWindow","shiftKey","isInternalLink","startsWith","includes","location","origin","preventDefault","onCopy","type","getSceneElements","getAppState","files","getFiles","concat","pointerData","setPointerData","onPointerDown","activeTool","pointerDownState","customType","x","y","value","rerenderCommentIcons","commentIconsElements","querySelectorAll","forEach","ele","appstate","sceneX","sceneY","left","offsetLeft","top","offsetTop","onPointerMoveFromPointerDownHandler","clientX","hitElementOffsets","clientY","hitElement","onPointerUpFromPointerDownHandler","removeEventListener","onMove","onUp","setActiveTool","distance","saveComment","renderCommentIcons","Object","values","map","commentIcon","position","zIndex","width","cursor","touchAction","className","onPointerMove","onPointerUp","addEventListener","src","alt","renderComment","ref","setTimeout","focus","placeholder","onChange","target","onBlur","onKeyDown","key","renderSidebar","handleDrop","dataTransfer","length","file","name","Date","now","canvasWrapper","querySelector","console","log","renderMenu","DefaultItems","SaveAsImage","Export","Separator","Group","title","Socials","ItemCustom","Help","resetScene","checked","newTheme","bind","display","gap","justifyContent","marginTop","pointer","onDrop","bottom","padding","transform","background","api","state","info","onPointerUpdate","payload","UIOptions","canvasActions","loadScene","onScrollChange","keys","_c","$RefreshReg$"],"sources":["/Users/karandesai/Downloads/excalidraw/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport dore from \"../public/doremon.png\";\nimport {\n  exportToCanvas,\n  exportToSvg,\n  exportToBlob,\n  exportToClipboard,\n  Excalidraw,\n  useHandleLibrary,\n  MIME_TYPES,\n  sceneCoordsToViewportCoords,\n  viewportCoordsToSceneCoords,\n  restoreElements,\n  LiveCollaborationTrigger,\n  MainMenu,\n  Footer,\n  Sidebar,\n} from \"@excalidraw/excalidraw\";\nimport {\n  AppState,\n  BinaryFileData,\n  ExcalidrawImperativeAPI,\n  ExcalidrawInitialDataState,\n  Gesture,\n  LibraryItems,\n  PointerDownState as ExcalidrawPointerDownState,\n} from \"@excalidraw/excalidraw/types/types\";\n\nimport ExampleSidebar from \"./sidebar/ExampleSidebar\";\n\nimport \"./App.scss\";\nimport initialData from \"./initialData\";\n\nimport { NonDeletedExcalidrawElement } from \"@excalidraw/excalidraw/types/element/types\";\nimport { nanoid } from \"nanoid\";\nimport CustomFooter from \"./CustomFooter\";\nimport MobileFooter from \"./MobileFooter\";\nimport {\n  resolvablePromise,\n  withBatchedUpdates,\n  withBatchedUpdatesThrottled,\n  distance2d,\n} from \"./utils\";\nimport { ResolvablePromise } from \"@excalidraw/excalidraw/types/utils\";\n\ndeclare global {\n  interface Window {\n    ExcalidrawLib: any;\n  }\n}\n\ntype Comment = {\n  x: number;\n  y: number;\n  value: string;\n  id?: string;\n};\n\ntype PointerDownState = {\n  x: number;\n  y: number;\n  hitElement: Comment;\n  onMove: any;\n  onUp: any;\n  hitElementOffsets: {\n    x: number;\n    y: number;\n  };\n};\n// This is so that we use the bundled excalidraw.development.js file instead\n// of the actual source code\n\nconst COMMENT_ICON_DIMENSION = 32;\nconst COMMENT_INPUT_HEIGHT = 50;\nconst COMMENT_INPUT_WIDTH = 150;\n\nexport default function App() {\n  const appRef = useRef<any>(null);\n  const [viewModeEnabled, setViewModeEnabled] = useState(false);\n  const [zenModeEnabled, setZenModeEnabled] = useState(false);\n  const [gridModeEnabled, setGridModeEnabled] = useState(false);\n  const [blobUrl, setBlobUrl] = useState<string>(\"\");\n  const [canvasUrl, setCanvasUrl] = useState<string>(\"\");\n  const [exportWithDarkMode, setExportWithDarkMode] = useState(false);\n  const [exportEmbedScene, setExportEmbedScene] = useState(false);\n  const [theme, setTheme] = useState(\"light\");\n  const [isCollaborating, setIsCollaborating] = useState(false);\n  const [commentIcons, setCommentIcons] = useState<{ [id: string]: Comment }>(\n    {}\n  );\n  const [comment, setComment] = useState<Comment | null>(null);\n\n  const initialStatePromiseRef = useRef<{\n    promise: ResolvablePromise<ExcalidrawInitialDataState | null>;\n  }>({ promise: null! });\n  if (!initialStatePromiseRef.current.promise) {\n    initialStatePromiseRef.current.promise = resolvablePromise();\n  }\n\n  const [excalidrawAPI, setExcalidrawAPI] =\n    useState<ExcalidrawImperativeAPI | null>(null);\n\n  useHandleLibrary({ excalidrawAPI });\n\n  useEffect(() => {\n    if (!excalidrawAPI) {\n      return;\n    }\n    const fetchData = async () => {\n      const res = await fetch(\"/rocket.jpeg\");\n      const imageData = await res.blob();\n      const reader = new FileReader();\n      reader.readAsDataURL(imageData);\n\n      reader.onload = function () {\n        const imagesArray: BinaryFileData[] = [\n          {\n            id: \"rocket\" as BinaryFileData[\"id\"],\n            dataURL: reader.result as BinaryFileData[\"dataURL\"],\n            mimeType: MIME_TYPES.jpg,\n            created: 1644915140367,\n            lastRetrieved: 1644915140367,\n          },\n        ];\n\n        //@ts-ignore\n        initialStatePromiseRef.current.promise.resolve(initialData);\n        excalidrawAPI.addFiles(imagesArray);\n      };\n    };\n    fetchData();\n  }, [excalidrawAPI]);\n\n  const renderTopRightUI = (isMobile: boolean) => {\n    return (\n      <>\n        {!isMobile && (\n          <LiveCollaborationTrigger\n            isCollaborating={isCollaborating}\n            onSelect={() => {\n              window.alert(\"Collab dialog clicked\");\n            }}\n          />\n        )}\n        <button\n          onClick={() => alert(\"This is dummy top right UI\")}\n          style={{ height: \"2.5rem\" }}\n        >\n          {\" \"}\n          Click me{\" \"}\n        </button>\n      </>\n    );\n  };\n\n  const updateScene = () => {\n    const sceneData = {\n      elements: restoreElements([], null),\n      appState: {\n        //   viewBackgroundColor: \"#edf2ff\"\n      },\n    };\n    excalidrawAPI?.updateScene(sceneData);\n  };\n\n  const onLinkOpen = useCallback(\n    (\n      element: NonDeletedExcalidrawElement,\n      event: CustomEvent<{\n        nativeEvent: MouseEvent | React.PointerEvent<HTMLCanvasElement>;\n      }>\n    ) => {\n      const link = element.link!;\n      const { nativeEvent } = event.detail;\n      const isNewTab = nativeEvent.ctrlKey || nativeEvent.metaKey;\n      const isNewWindow = nativeEvent.shiftKey;\n      const isInternalLink =\n        link.startsWith(\"/\") || link.includes(window.location.origin);\n      if (isInternalLink && !isNewTab && !isNewWindow) {\n        // signal that we're handling the redirect ourselves\n        event.preventDefault();\n        // do a custom redirect, such as passing to react-router\n        // ...\n      }\n    },\n    []\n  );\n\n  const onCopy = async (type: \"png\" | \"svg\" | \"json\") => {\n    if (!excalidrawAPI) {\n      return false;\n    }\n    await exportToClipboard({\n      elements: excalidrawAPI.getSceneElements(),\n      appState: excalidrawAPI.getAppState(),\n      files: excalidrawAPI.getFiles(),\n      type,\n    });\n    window.alert(`Copied to clipboard as ${type} successfully`);\n  };\n\n  const [pointerData, setPointerData] = useState<{\n    pointer: { x: number; y: number };\n    button: \"down\" | \"up\";\n    pointersMap: Gesture[\"pointers\"];\n  } | null>(null);\n\n  const onPointerDown = (\n    activeTool: AppState[\"activeTool\"],\n    pointerDownState: ExcalidrawPointerDownState\n  ) => {\n    if (activeTool.type === \"custom\" && activeTool.customType === \"comment\") {\n      const { x, y } = pointerDownState.origin;\n      setComment({ x, y, value: \"\" });\n    }\n  };\n\n  const rerenderCommentIcons = () => {\n    if (!excalidrawAPI) {\n      return false;\n    }\n    const commentIconsElements = appRef.current.querySelectorAll(\n      \".comment-icon\"\n    ) as HTMLElement[];\n    commentIconsElements.forEach((ele) => {\n      const id = ele.id;\n      const appstate = excalidrawAPI.getAppState();\n      const { x, y } = sceneCoordsToViewportCoords(\n        { sceneX: commentIcons[id].x, sceneY: commentIcons[id].y },\n        appstate\n      );\n      ele.style.left = `${\n        x - COMMENT_ICON_DIMENSION / 2 - appstate!.offsetLeft\n      }px`;\n      ele.style.top = `${\n        y - COMMENT_ICON_DIMENSION / 2 - appstate!.offsetTop\n      }px`;\n    });\n  };\n\n  const onPointerMoveFromPointerDownHandler = (\n    pointerDownState: PointerDownState\n  ) => {\n    return withBatchedUpdatesThrottled((event) => {\n      if (!excalidrawAPI) {\n        return false;\n      }\n      const { x, y } = viewportCoordsToSceneCoords(\n        {\n          clientX: event.clientX - pointerDownState.hitElementOffsets.x,\n          clientY: event.clientY - pointerDownState.hitElementOffsets.y,\n        },\n        excalidrawAPI.getAppState()\n      );\n      setCommentIcons({\n        ...commentIcons,\n        [pointerDownState.hitElement.id!]: {\n          ...commentIcons[pointerDownState.hitElement.id!],\n          x,\n          y,\n        },\n      });\n    });\n  };\n  const onPointerUpFromPointerDownHandler = (\n    pointerDownState: PointerDownState\n  ) => {\n    return withBatchedUpdates((event) => {\n      window.removeEventListener(\"pointermove\", pointerDownState.onMove);\n      window.removeEventListener(\"pointerup\", pointerDownState.onUp);\n      excalidrawAPI?.setActiveTool({ type: \"selection\" });\n      const distance = distance2d(\n        pointerDownState.x,\n        pointerDownState.y,\n        event.clientX,\n        event.clientY\n      );\n      if (distance === 0) {\n        if (!comment) {\n          setComment({\n            x: pointerDownState.hitElement.x + 60,\n            y: pointerDownState.hitElement.y,\n            value: pointerDownState.hitElement.value,\n            id: pointerDownState.hitElement.id,\n          });\n        } else {\n          setComment(null);\n        }\n      }\n    });\n  };\n  const saveComment = () => {\n    if (!comment) {\n      return;\n    }\n    if (!comment.id && !comment.value) {\n      setComment(null);\n      return;\n    }\n    const id = comment.id || nanoid();\n    setCommentIcons({\n      ...commentIcons,\n      [id]: {\n        x: comment.id ? comment.x - 60 : comment.x,\n        y: comment.y,\n        id,\n        value: comment.value,\n      },\n    });\n    setComment(null);\n  };\n\n  const renderCommentIcons = () => {\n    return Object.values(commentIcons).map((commentIcon) => {\n      if (!excalidrawAPI) {\n        return false;\n      }\n      const appState = excalidrawAPI.getAppState();\n      const { x, y } = sceneCoordsToViewportCoords(\n        { sceneX: commentIcon.x, sceneY: commentIcon.y },\n        excalidrawAPI.getAppState()\n      );\n      return (\n        <div\n          id={commentIcon.id}\n          key={commentIcon.id}\n          style={{\n            top: `${y - COMMENT_ICON_DIMENSION / 2 - appState!.offsetTop}px`,\n            left: `${x - COMMENT_ICON_DIMENSION / 2 - appState!.offsetLeft}px`,\n            position: \"absolute\",\n            zIndex: 1,\n            width: `${COMMENT_ICON_DIMENSION}px`,\n            height: `${COMMENT_ICON_DIMENSION}px`,\n            cursor: \"pointer\",\n            touchAction: \"none\",\n          }}\n          className=\"comment-icon\"\n          onPointerDown={(event) => {\n            event.preventDefault();\n            if (comment) {\n              commentIcon.value = comment.value;\n              saveComment();\n            }\n            const pointerDownState: any = {\n              x: event.clientX,\n              y: event.clientY,\n              hitElement: commentIcon,\n              hitElementOffsets: { x: event.clientX - x, y: event.clientY - y },\n            };\n            const onPointerMove =\n              onPointerMoveFromPointerDownHandler(pointerDownState);\n            const onPointerUp =\n              onPointerUpFromPointerDownHandler(pointerDownState);\n            window.addEventListener(\"pointermove\", onPointerMove);\n            window.addEventListener(\"pointerup\", onPointerUp);\n\n            pointerDownState.onMove = onPointerMove;\n            pointerDownState.onUp = onPointerUp;\n\n            excalidrawAPI?.setActiveTool({\n              type: \"custom\",\n              customType: \"comment\",\n            });\n          }}\n        >\n          <div className=\"comment-avatar\">\n            <img src=\"doremon.png\" alt=\"doremon\" />\n          </div>\n        </div>\n      );\n    });\n  };\n\n  const renderComment = () => {\n    if (!comment) {\n      return null;\n    }\n    const appState = excalidrawAPI?.getAppState()!;\n    const { x, y } = sceneCoordsToViewportCoords(\n      { sceneX: comment.x, sceneY: comment.y },\n      appState\n    );\n    let top = y - COMMENT_ICON_DIMENSION / 2 - appState.offsetTop;\n    let left = x - COMMENT_ICON_DIMENSION / 2 - appState.offsetLeft;\n\n    if (\n      top + COMMENT_INPUT_HEIGHT <\n      appState.offsetTop + COMMENT_INPUT_HEIGHT\n    ) {\n      top = COMMENT_ICON_DIMENSION / 2;\n    }\n    if (top + COMMENT_INPUT_HEIGHT > appState.height) {\n      top = appState.height - COMMENT_INPUT_HEIGHT - COMMENT_ICON_DIMENSION / 2;\n    }\n    if (\n      left + COMMENT_INPUT_WIDTH <\n      appState.offsetLeft + COMMENT_INPUT_WIDTH\n    ) {\n      left = COMMENT_ICON_DIMENSION / 2;\n    }\n    if (left + COMMENT_INPUT_WIDTH > appState.width) {\n      left = appState.width - COMMENT_INPUT_WIDTH - COMMENT_ICON_DIMENSION / 2;\n    }\n\n    return (\n      <textarea\n        className=\"comment\"\n        style={{\n          top: `${top}px`,\n          left: `${left}px`,\n          position: \"absolute\",\n          zIndex: 1,\n          height: `${COMMENT_INPUT_HEIGHT}px`,\n          width: `${COMMENT_INPUT_WIDTH}px`,\n        }}\n        ref={(ref) => {\n          setTimeout(() => ref?.focus());\n        }}\n        placeholder={comment.value ? \"Reply\" : \"Comment\"}\n        value={comment.value}\n        onChange={(event) => {\n          setComment({ ...comment, value: event.target.value });\n        }}\n        onBlur={saveComment}\n        onKeyDown={(event) => {\n          if (!event.shiftKey && event.key === \"Enter\") {\n            event.preventDefault();\n            saveComment();\n          }\n        }}\n      />\n    );\n  };\n\n  const renderSidebar = () => {\n    return (\n      <></>\n      // <Sidebar>\n      //   <Sidebar.Header>Custom header!</Sidebar.Header>\n      //   Custom sidebar!\n      // </Sidebar>\n    );\n  };\n  \n  const handleDrop = useCallback(\n    async (event: React.DragEvent<HTMLDivElement>) => {\n      event.preventDefault();\n\n      const files = event.dataTransfer.files;\n      if (files.length > 0) {\n        const file = files[0];\n\n        if (file.type.startsWith(\"image/\")) {\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n\n          reader.onload = function () {\n            const imagesArray: BinaryFileData[] = [\n              {\n                id: file.name as any, // Type assertion here\n                dataURL: reader.result as BinaryFileData[\"dataURL\"],\n                mimeType: file.type as any,\n                created: Date.now(),\n                lastRetrieved: Date.now(),\n              },\n            ];\n\n            // Add the image to the Excalidraw canvas\n            excalidrawAPI?.addFiles(imagesArray);\n          };\n        }\n      }\n    },\n    [excalidrawAPI]\n  );\n\n  useEffect(() => {\n    const canvasWrapper = appRef.current.querySelector(\".excalidraw-wrapper\");\nconsole.log(\"effect\")\n    // Listen for drop events on the canvas\n    canvasWrapper.addEventListener(\"drop\", handleDrop);\n\n    // Prevent default behavior for drag-and-drop to allow dropping files\n    canvasWrapper.addEventListener(\"dragover\", (event:any) => {\n      event.preventDefault();\n    });\n\n    // Cleanup event listeners on component unmount\n    return () => {\n      canvasWrapper.removeEventListener(\"drop\", handleDrop);\n      canvasWrapper.removeEventListener(\"dragover\", (event:any) => {\n        event.preventDefault();\n      });\n    };\n  }, [handleDrop]);\n\n  // ... (rest of the existing code)\n\n\n  const renderMenu = () => {\n    return (\n      <MainMenu>\n        <MainMenu.DefaultItems.SaveAsImage />\n        <MainMenu.DefaultItems.Export />\n        <MainMenu.Separator />\n        {/* <MainMenu.DefaultItems.LiveCollaborationTrigger\n          isCollaborating={isCollaborating}\n          onSelect={() => window.alert(\"You clicked on collab button\")}\n        /> */}\n        <MainMenu.Group title=\"Excalidraw links\">\n          <MainMenu.DefaultItems.Socials />\n        </MainMenu.Group>\n        <MainMenu.Separator />\n        <MainMenu.ItemCustom>\n          <button\n            style={{ height: \"2rem\" }}\n            onClick={() => window.alert(\"custom menu item\")}\n          >\n            custom item\n          </button>\n        </MainMenu.ItemCustom>\n        <MainMenu.DefaultItems.Help />\n\n        {excalidrawAPI && <MobileFooter excalidrawAPI={excalidrawAPI} />}\n      </MainMenu>\n    );\n  };\n  return (\n    <div className=\"App\" ref={appRef}>\n      <h1>HTML canvas</h1>\n      <ExampleSidebar>\n        <div className=\"button-wrapper\">\n          <button className=\"update-scene\" onClick={updateScene}>\n            Update Canvas\n          </button>\n          <button\n            className=\"reset-scene\"\n            onClick={() => {\n              excalidrawAPI?.resetScene();\n            }}\n          >\n            Reset Canvas\n          </button>\n\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={viewModeEnabled}\n              onChange={() => setViewModeEnabled(!viewModeEnabled)}\n            />\n            View mode\n          </label>\n          {/* <label>\n            <input\n              type=\"checkbox\"\n              checked={zenModeEnabled}\n              onChange={() => setZenModeEnabled(!zenModeEnabled)}\n            />\n            Zen mode\n          </label> */}\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={gridModeEnabled}\n              onChange={() => setGridModeEnabled(!gridModeEnabled)}\n            />\n            Grid mode\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={theme === \"dark\"}\n              onChange={() => {\n                let newTheme = \"light\";\n                if (theme === \"light\") {\n                  newTheme = \"dark\";\n                }\n                setTheme(newTheme);\n              }}\n            />\n            Switch to Dark Theme\n          </label>\n\n         \n            <button onClick={onCopy.bind(null, \"png\")}>\n              Copy to Clipboard as PNG\n            </button>\n            <button onClick={onCopy.bind(null, \"svg\")}>\n              Copy to Clipboard as SVG\n            </button>\n            <button onClick={onCopy.bind(null, \"json\")}>\n              Copy to Clipboard as JSON\n            </button>\n          \n          <div\n            style={{\n              display: \"flex\",\n              gap: \"1em\",\n              justifyContent: \"center\",\n              marginTop: \"1em\",\n            }}\n          >\n            <div>x: {pointerData?.pointer.x ?? 0}</div>\n            <div>y: {pointerData?.pointer.y ?? 0}</div>\n          </div>\n        </div>\n        <div className=\"parentDiv\">\n          <div className=\"excalidraw-wrapper\"  onDrop={handleDrop} >\n            <div\n              style={{\n                position: \"absolute\",\n                left: \"50%\",\n                bottom: \"20px\",\n                display: \"flex\",\n                zIndex: 9999999999999999,\n                padding: \"5px 10px\",\n                transform: \"translateX(-50%)\",\n                background: \"rgba(255, 255, 255, 0.8)\",\n                gap: \"1rem\",\n              }}\n            ></div>\n            <Excalidraw\n              ref={(api: ExcalidrawImperativeAPI) => setExcalidrawAPI(api)}\n              initialData={initialStatePromiseRef.current.promise}\n              onChange={(elements, state) => {\n                console.info(\"Elements :\", elements, \"State : \", state);\n              }}\n              onPointerUpdate={(payload: {\n                pointer: { x: number; y: number };\n                button: \"down\" | \"up\";\n                pointersMap: Gesture[\"pointers\"];\n              }) => setPointerData(payload)}\n              viewModeEnabled={viewModeEnabled}\n              zenModeEnabled={zenModeEnabled}\n              gridModeEnabled={gridModeEnabled}\n              theme={theme as any}\n              name=\"Custom name of drawing\"\n              UIOptions={{ canvasActions: { loadScene: false } }}\n              // renderTopRightUI={renderTopRightUI}\n              onLinkOpen={onLinkOpen}\n              onPointerDown={onPointerDown}\n              onScrollChange={rerenderCommentIcons}\n              // renderSidebar={renderSidebar}\n\n            >\n              {/* {excalidrawAPI && (\n              <Footer>\n                <CustomFooter excalidrawAPI={excalidrawAPI} />\n              </Footer>\n            )}\n            {renderMenu()} */}\n            </Excalidraw>\n            {Object.keys(commentIcons || []).length > 0 && renderCommentIcons()}\n            {comment && renderComment()}\n          </div>\n          <div>\n            {\" \"}\n            <img\n              src=\"messi.png\"\n              alt=\"messi\"\n              style={{\n                height: \"200px\",\n                width: \"240px\",\n              }}\n            />\n          </div>\n        </div>\n\n        {/* <div className=\"export-wrapper button-wrapper\">\n          <label className=\"export-wrapper__checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={exportWithDarkMode}\n              onChange={() => setExportWithDarkMode(!exportWithDarkMode)}\n            />\n            Export with dark mode\n          </label>\n          <label className=\"export-wrapper__checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={exportEmbedScene}\n              onChange={() => setExportEmbedScene(!exportEmbedScene)}\n            />\n            Export with embed scene\n          </label>\n          <button\n            onClick={async () => {\n              if (!excalidrawAPI) {\n                return;\n              }\n              const svg = await exportToSvg({\n                elements: excalidrawAPI?.getSceneElements(),\n                appState: {\n                  ...initialData.appState,\n                  exportWithDarkMode,\n                  exportEmbedScene,\n                  width: 300,\n                  height: 100\n                },\n                files: excalidrawAPI?.getFiles()\n              });\n              appRef.current.querySelector(\".export-svg\").innerHTML =\n                svg.outerHTML;\n            }}\n          >\n            Export to SVG\n          </button>\n          <div className=\"export export-svg\"></div>\n\n          <button\n            onClick={async () => {\n              if (!excalidrawAPI) {\n                return;\n              }\n              const blob = await exportToBlob({\n                elements: excalidrawAPI?.getSceneElements(),\n                mimeType: \"image/png\",\n                appState: {\n                  ...initialData.appState,\n                  exportEmbedScene,\n                  exportWithDarkMode\n                },\n                files: excalidrawAPI?.getFiles()\n              });\n              setBlobUrl(window.URL.createObjectURL(blob));\n            }}\n          >\n            Export to Blob\n          </button>\n          <div className=\"export export-blob\">\n            <img src={blobUrl} alt=\"\" />\n          </div>\n\n          <button\n            onClick={async () => {\n              if (!excalidrawAPI) {\n                return;\n              }\n              const canvas = await exportToCanvas({\n                elements: excalidrawAPI.getSceneElements(),\n                appState: {\n                  ...initialData.appState,\n                  exportWithDarkMode\n                },\n                files: excalidrawAPI.getFiles()\n              });\n              const ctx = canvas.getContext(\"2d\")!;\n              ctx.font = \"30px Virgil\";\n              ctx.strokeText(\"My custom text\", 50, 60);\n              setCanvasUrl(canvas.toDataURL());\n            }}\n          >\n            Export to Canvas\n          </button>\n          <div className=\"export export-canvas\">\n            <img src={canvasUrl} alt=\"\" />\n          </div>\n        </div> */}\n      </ExampleSidebar>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/karandesai/Downloads/excalidraw-forked/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport { exportToCanvas, exportToSvg, exportToBlob, exportToClipboard, Excalidraw, useHandleLibrary, MIME_TYPES, sceneCoordsToViewportCoords, viewportCoordsToSceneCoords, restoreElements, LiveCollaborationTrigger, MainMenu, Footer, Sidebar } from \"@excalidraw/excalidraw\";\nimport ExampleSidebar from \"./sidebar/ExampleSidebar\";\nimport \"./App.scss\";\n//import initialData from \"./initialData\";\n\nimport { nanoid } from \"nanoid\";\nimport CustomFooter from \"./CustomFooter\";\nimport MobileFooter from \"./MobileFooter\";\nimport { resolvablePromise, withBatchedUpdates, withBatchedUpdatesThrottled, distance2d } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// This is so that we use the bundled excalidraw.development.js file instead\n// of the actual source code\nconst COMMENT_ICON_DIMENSION = 32;\nconst COMMENT_INPUT_HEIGHT = 50;\nconst COMMENT_INPUT_WIDTH = 150;\nexport default function App() {\n  _s();\n  var _pointerData$pointer$, _pointerData$pointer$2;\n  const appRef = useRef(null);\n  const [viewModeEnabled, setViewModeEnabled] = useState(false);\n  const [zenModeEnabled, setZenModeEnabled] = useState(false);\n  const [gridModeEnabled, setGridModeEnabled] = useState(false);\n  const [blobUrl, setBlobUrl] = useState(\"\");\n  const [canvasUrl, setCanvasUrl] = useState(\"\");\n  const [exportWithDarkMode, setExportWithDarkMode] = useState(false);\n  const [exportEmbedScene, setExportEmbedScene] = useState(false);\n  const [theme, setTheme] = useState(\"light\");\n  const [isCollaborating, setIsCollaborating] = useState(false);\n  const [commentIcons, setCommentIcons] = useState({});\n  const [comment, setComment] = useState(null);\n  const initialStatePromiseRef = useRef({\n    promise: null\n  });\n  if (!initialStatePromiseRef.current.promise) {\n    initialStatePromiseRef.current.promise = resolvablePromise();\n  }\n  const [excalidrawAPI, setExcalidrawAPI] = useState(null);\n  useHandleLibrary({\n    excalidrawAPI\n  });\n  useEffect(() => {\n    if (!excalidrawAPI) {\n      return;\n    }\n    const fetchData = async () => {\n      const res = await fetch(\"/rocket.jpeg\");\n      const imageData = await res.blob();\n      const reader = new FileReader();\n      reader.readAsDataURL(imageData);\n      reader.onload = function () {\n        const imagesArray = [{\n          id: \"rocket\",\n          dataURL: reader.result,\n          mimeType: MIME_TYPES.jpg,\n          created: 1644915140367,\n          lastRetrieved: 1644915140367\n        }];\n\n        //@ts-ignore\n        initialStatePromiseRef.current.promise.resolve(initialData);\n        excalidrawAPI.addFiles(imagesArray);\n      };\n    };\n    fetchData();\n  }, [excalidrawAPI]);\n  const renderTopRightUI = isMobile => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [!isMobile && /*#__PURE__*/_jsxDEV(LiveCollaborationTrigger, {\n        isCollaborating: isCollaborating,\n        onSelect: () => {\n          window.alert(\"Collab dialog clicked\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alert(\"This is dummy top right UI\"),\n        style: {\n          height: \"2.5rem\"\n        },\n        children: [\" \", \"Click me\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  const updateScene = () => {\n    const sceneData = {\n      elements: restoreElements([{\n        type: \"rectangle\",\n        version: 141,\n        versionNonce: 361174001,\n        isDeleted: false,\n        id: \"oDVXy8D6rom3H1-LLH2-f\",\n        fillStyle: \"hachure\",\n        strokeWidth: 1,\n        strokeStyle: \"solid\",\n        roughness: 1,\n        opacity: 100,\n        angle: 0,\n        x: 100.50390625,\n        y: 93.67578125,\n        strokeColor: \"#c92a2a\",\n        backgroundColor: \"transparent\",\n        width: 186.47265625,\n        height: 141.9765625,\n        seed: 1968410350,\n        groupIds: [],\n        boundElements: null,\n        locked: false,\n        link: null,\n        updated: 1,\n        roundness: {\n          type: 3,\n          value: 32\n        }\n      }], null),\n      appState: {\n        viewBackgroundColor: \"#edf2ff\"\n      }\n    };\n    excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.updateScene(sceneData);\n  };\n  const onLinkOpen = useCallback((element, event) => {\n    const link = element.link;\n    const {\n      nativeEvent\n    } = event.detail;\n    const isNewTab = nativeEvent.ctrlKey || nativeEvent.metaKey;\n    const isNewWindow = nativeEvent.shiftKey;\n    const isInternalLink = link.startsWith(\"/\") || link.includes(window.location.origin);\n    if (isInternalLink && !isNewTab && !isNewWindow) {\n      // signal that we're handling the redirect ourselves\n      event.preventDefault();\n      // do a custom redirect, such as passing to react-router\n      // ...\n    }\n  }, []);\n  const onCopy = async type => {\n    if (!excalidrawAPI) {\n      return false;\n    }\n    await exportToClipboard({\n      elements: excalidrawAPI.getSceneElements(),\n      appState: excalidrawAPI.getAppState(),\n      files: excalidrawAPI.getFiles(),\n      type\n    });\n    window.alert(\"Copied to clipboard as \".concat(type, \" successfully\"));\n  };\n  const [pointerData, setPointerData] = useState(null);\n  const onPointerDown = (activeTool, pointerDownState) => {\n    if (activeTool.type === \"custom\" && activeTool.customType === \"comment\") {\n      const {\n        x,\n        y\n      } = pointerDownState.origin;\n      setComment({\n        x,\n        y,\n        value: \"\"\n      });\n    }\n  };\n  const rerenderCommentIcons = () => {\n    if (!excalidrawAPI) {\n      return false;\n    }\n    const commentIconsElements = appRef.current.querySelectorAll(\".comment-icon\");\n    commentIconsElements.forEach(ele => {\n      const id = ele.id;\n      const appstate = excalidrawAPI.getAppState();\n      const {\n        x,\n        y\n      } = sceneCoordsToViewportCoords({\n        sceneX: commentIcons[id].x,\n        sceneY: commentIcons[id].y\n      }, appstate);\n      ele.style.left = \"\".concat(x - COMMENT_ICON_DIMENSION / 2 - appstate.offsetLeft, \"px\");\n      ele.style.top = \"\".concat(y - COMMENT_ICON_DIMENSION / 2 - appstate.offsetTop, \"px\");\n    });\n  };\n  const onPointerMoveFromPointerDownHandler = pointerDownState => {\n    return withBatchedUpdatesThrottled(event => {\n      if (!excalidrawAPI) {\n        return false;\n      }\n      const {\n        x,\n        y\n      } = viewportCoordsToSceneCoords({\n        clientX: event.clientX - pointerDownState.hitElementOffsets.x,\n        clientY: event.clientY - pointerDownState.hitElementOffsets.y\n      }, excalidrawAPI.getAppState());\n      setCommentIcons({\n        ...commentIcons,\n        [pointerDownState.hitElement.id]: {\n          ...commentIcons[pointerDownState.hitElement.id],\n          x,\n          y\n        }\n      });\n    });\n  };\n  const onPointerUpFromPointerDownHandler = pointerDownState => {\n    return withBatchedUpdates(event => {\n      window.removeEventListener(\"pointermove\", pointerDownState.onMove);\n      window.removeEventListener(\"pointerup\", pointerDownState.onUp);\n      excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.setActiveTool({\n        type: \"selection\"\n      });\n      const distance = distance2d(pointerDownState.x, pointerDownState.y, event.clientX, event.clientY);\n      if (distance === 0) {\n        if (!comment) {\n          setComment({\n            x: pointerDownState.hitElement.x + 60,\n            y: pointerDownState.hitElement.y,\n            value: pointerDownState.hitElement.value,\n            id: pointerDownState.hitElement.id\n          });\n        } else {\n          setComment(null);\n        }\n      }\n    });\n  };\n  const saveComment = () => {\n    if (!comment) {\n      return;\n    }\n    if (!comment.id && !comment.value) {\n      setComment(null);\n      return;\n    }\n    const id = comment.id || nanoid();\n    setCommentIcons({\n      ...commentIcons,\n      [id]: {\n        x: comment.id ? comment.x - 60 : comment.x,\n        y: comment.y,\n        id,\n        value: comment.value\n      }\n    });\n    setComment(null);\n  };\n  const renderCommentIcons = () => {\n    return Object.values(commentIcons).map(commentIcon => {\n      if (!excalidrawAPI) {\n        return false;\n      }\n      const appState = excalidrawAPI.getAppState();\n      const {\n        x,\n        y\n      } = sceneCoordsToViewportCoords({\n        sceneX: commentIcon.x,\n        sceneY: commentIcon.y\n      }, excalidrawAPI.getAppState());\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: commentIcon.id,\n        style: {\n          top: \"\".concat(y - COMMENT_ICON_DIMENSION / 2 - appState.offsetTop, \"px\"),\n          left: \"\".concat(x - COMMENT_ICON_DIMENSION / 2 - appState.offsetLeft, \"px\"),\n          position: \"absolute\",\n          zIndex: 1,\n          width: \"\".concat(COMMENT_ICON_DIMENSION, \"px\"),\n          height: \"\".concat(COMMENT_ICON_DIMENSION, \"px\"),\n          cursor: \"pointer\",\n          touchAction: \"none\"\n        },\n        className: \"comment-icon\",\n        onPointerDown: event => {\n          event.preventDefault();\n          if (comment) {\n            commentIcon.value = comment.value;\n            saveComment();\n          }\n          const pointerDownState = {\n            x: event.clientX,\n            y: event.clientY,\n            hitElement: commentIcon,\n            hitElementOffsets: {\n              x: event.clientX - x,\n              y: event.clientY - y\n            }\n          };\n          const onPointerMove = onPointerMoveFromPointerDownHandler(pointerDownState);\n          const onPointerUp = onPointerUpFromPointerDownHandler(pointerDownState);\n          window.addEventListener(\"pointermove\", onPointerMove);\n          window.addEventListener(\"pointerup\", onPointerUp);\n          pointerDownState.onMove = onPointerMove;\n          pointerDownState.onUp = onPointerUp;\n          excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.setActiveTool({\n            type: \"custom\",\n            customType: \"comment\"\n          });\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-avatar\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"doremon.png\",\n            alt: \"doremon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this)\n      }, commentIcon.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const renderComment = () => {\n    if (!comment) {\n      return null;\n    }\n    const appState = excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.getAppState();\n    const {\n      x,\n      y\n    } = sceneCoordsToViewportCoords({\n      sceneX: comment.x,\n      sceneY: comment.y\n    }, appState);\n    let top = y - COMMENT_ICON_DIMENSION / 2 - appState.offsetTop;\n    let left = x - COMMENT_ICON_DIMENSION / 2 - appState.offsetLeft;\n    if (top + COMMENT_INPUT_HEIGHT < appState.offsetTop + COMMENT_INPUT_HEIGHT) {\n      top = COMMENT_ICON_DIMENSION / 2;\n    }\n    if (top + COMMENT_INPUT_HEIGHT > appState.height) {\n      top = appState.height - COMMENT_INPUT_HEIGHT - COMMENT_ICON_DIMENSION / 2;\n    }\n    if (left + COMMENT_INPUT_WIDTH < appState.offsetLeft + COMMENT_INPUT_WIDTH) {\n      left = COMMENT_ICON_DIMENSION / 2;\n    }\n    if (left + COMMENT_INPUT_WIDTH > appState.width) {\n      left = appState.width - COMMENT_INPUT_WIDTH - COMMENT_ICON_DIMENSION / 2;\n    }\n    return /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"comment\",\n      style: {\n        top: \"\".concat(top, \"px\"),\n        left: \"\".concat(left, \"px\"),\n        position: \"absolute\",\n        zIndex: 1,\n        height: \"\".concat(COMMENT_INPUT_HEIGHT, \"px\"),\n        width: \"\".concat(COMMENT_INPUT_WIDTH, \"px\")\n      },\n      ref: ref => {\n        setTimeout(() => ref === null || ref === void 0 ? void 0 : ref.focus());\n      },\n      placeholder: comment.value ? \"Reply\" : \"Comment\",\n      value: comment.value,\n      onChange: event => {\n        setComment({\n          ...comment,\n          value: event.target.value\n        });\n      },\n      onBlur: saveComment,\n      onKeyDown: event => {\n        if (!event.shiftKey && event.key === \"Enter\") {\n          event.preventDefault();\n          saveComment();\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSidebar = () => {\n    return /*#__PURE__*/_jsxDEV(Sidebar, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar.Header, {\n        children: \"Custom header!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this), \"Custom sidebar!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this);\n  };\n  const renderMenu = () => {\n    return /*#__PURE__*/_jsxDEV(MainMenu, {\n      children: [/*#__PURE__*/_jsxDEV(MainMenu.DefaultItems.SaveAsImage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.DefaultItems.Export, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.Separator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.DefaultItems.LiveCollaborationTrigger, {\n        isCollaborating: isCollaborating,\n        onSelect: () => window.alert(\"You clicked on collab button\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.Group, {\n        title: \"Excalidraw links\",\n        children: /*#__PURE__*/_jsxDEV(MainMenu.DefaultItems.Socials, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.Separator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.ItemCustom, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            height: \"2rem\"\n          },\n          onClick: () => window.alert(\"custom menu item\"),\n          children: \"custom item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu.DefaultItems.Help, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this), excalidrawAPI && /*#__PURE__*/_jsxDEV(MobileFooter, {\n        excalidrawAPI: excalidrawAPI\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: appRef,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Excalidraw Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExampleSidebar, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"update-scene\",\n          onClick: updateScene,\n          children: \"Update Scene\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-scene\",\n          onClick: () => {\n            excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.resetScene();\n          },\n          children: \"Reset Scene\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const libraryItems = [{\n              status: \"published\",\n              id: \"1\",\n              created: 1,\n              elements: initialData.libraryItems[1]\n            }, {\n              status: \"unpublished\",\n              id: \"2\",\n              created: 2,\n              elements: initialData.libraryItems[1]\n            }];\n            excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.updateLibrary({\n              libraryItems\n            });\n          },\n          children: \"Update Library\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: viewModeEnabled,\n            onChange: () => setViewModeEnabled(!viewModeEnabled)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 13\n          }, this), \"View mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: zenModeEnabled,\n            onChange: () => setZenModeEnabled(!zenModeEnabled)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 13\n          }, this), \"Zen mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: gridModeEnabled,\n            onChange: () => setGridModeEnabled(!gridModeEnabled)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 13\n          }, this), \"Grid mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: theme === \"dark\",\n            onChange: () => {\n              let newTheme = \"light\";\n              if (theme === \"light\") {\n                newTheme = \"dark\";\n              }\n              setTheme(newTheme);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 13\n          }, this), \"Switch to Dark Theme\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onCopy.bind(null, \"png\"),\n            children: \"Copy to Clipboard as PNG\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onCopy.bind(null, \"svg\"),\n            children: \"Copy to Clipboard as SVG\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onCopy.bind(null, \"json\"),\n            children: \"Copy to Clipboard as JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: \"1em\",\n            justifyContent: \"center\",\n            marginTop: \"1em\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"x: \", (_pointerData$pointer$ = pointerData === null || pointerData === void 0 ? void 0 : pointerData.pointer.x) !== null && _pointerData$pointer$ !== void 0 ? _pointerData$pointer$ : 0]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"y: \", (_pointerData$pointer$2 = pointerData === null || pointerData === void 0 ? void 0 : pointerData.pointer.y) !== null && _pointerData$pointer$2 !== void 0 ? _pointerData$pointer$2 : 0]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"excalidraw-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"absolute\",\n            left: \"50%\",\n            bottom: \"20px\",\n            display: \"flex\",\n            zIndex: 9999999999999999,\n            padding: \"5px 10px\",\n            transform: \"translateX(-50%)\",\n            background: \"rgba(255, 255, 255, 0.8)\",\n            gap: \"1rem\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.toggleMenu(\"customSidebar\"),\n            children: \"Toggle Custom Sidebar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Excalidraw, {\n          ref: api => setExcalidrawAPI(api),\n          initialData: initialStatePromiseRef.current.promise,\n          onChange: (elements, state) => {\n            console.info(\"Elements :\", elements, \"State : \", state);\n          },\n          onPointerUpdate: payload => setPointerData(payload),\n          viewModeEnabled: viewModeEnabled,\n          zenModeEnabled: zenModeEnabled,\n          gridModeEnabled: gridModeEnabled,\n          theme: theme,\n          name: \"Custom name of drawing\",\n          UIOptions: {\n            canvasActions: {\n              loadScene: false\n            }\n          },\n          renderTopRightUI: renderTopRightUI,\n          onLinkOpen: onLinkOpen,\n          onPointerDown: onPointerDown,\n          onScrollChange: rerenderCommentIcons,\n          renderSidebar: renderSidebar,\n          children: [excalidrawAPI && /*#__PURE__*/_jsxDEV(Footer, {\n            children: /*#__PURE__*/_jsxDEV(CustomFooter, {\n              excalidrawAPI: excalidrawAPI\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 15\n          }, this), renderMenu()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 11\n        }, this), Object.keys(commentIcons || []).length > 0 && renderCommentIcons(), comment && renderComment()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"export-wrapper button-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"export-wrapper__checkbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: exportWithDarkMode,\n            onChange: () => setExportWithDarkMode(!exportWithDarkMode)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 13\n          }, this), \"Export with dark mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"export-wrapper__checkbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: exportEmbedScene,\n            onChange: () => setExportEmbedScene(!exportEmbedScene)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 13\n          }, this), \"Export with embed scene\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: async () => {\n            if (!excalidrawAPI) {\n              return;\n            }\n            const svg = await exportToSvg({\n              elements: excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.getSceneElements(),\n              appState: {\n                ...initialData.appState,\n                exportWithDarkMode,\n                exportEmbedScene,\n                width: 300,\n                height: 100\n              },\n              files: excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.getFiles()\n            });\n            appRef.current.querySelector(\".export-svg\").innerHTML = svg.outerHTML;\n          },\n          children: \"Export to SVG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"export export-svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: async () => {\n            if (!excalidrawAPI) {\n              return;\n            }\n            const blob = await exportToBlob({\n              elements: excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.getSceneElements(),\n              mimeType: \"image/png\",\n              appState: {\n                ...initialData.appState,\n                exportEmbedScene,\n                exportWithDarkMode\n              },\n              files: excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.getFiles()\n            });\n            setBlobUrl(window.URL.createObjectURL(blob));\n          },\n          children: \"Export to Blob\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"export export-blob\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: blobUrl,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: async () => {\n            if (!excalidrawAPI) {\n              return;\n            }\n            const canvas = await exportToCanvas({\n              elements: excalidrawAPI.getSceneElements(),\n              appState: {\n                ...initialData.appState,\n                exportWithDarkMode\n              },\n              files: excalidrawAPI.getFiles()\n            });\n            const ctx = canvas.getContext(\"2d\");\n            ctx.font = \"30px Virgil\";\n            ctx.strokeText(\"My custom text\", 50, 60);\n            setCanvasUrl(canvas.toDataURL());\n          },\n          children: \"Export to Canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"export export-canvas\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: canvasUrl,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 509,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cEDFP0/KkhHw5PZhlYXjp/b6o2I=\", false, function () {\n  return [useHandleLibrary];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","exportToCanvas","exportToSvg","exportToBlob","exportToClipboard","Excalidraw","useHandleLibrary","MIME_TYPES","sceneCoordsToViewportCoords","viewportCoordsToSceneCoords","restoreElements","LiveCollaborationTrigger","MainMenu","Footer","Sidebar","ExampleSidebar","nanoid","CustomFooter","MobileFooter","resolvablePromise","withBatchedUpdates","withBatchedUpdatesThrottled","distance2d","jsxDEV","_jsxDEV","Fragment","_Fragment","COMMENT_ICON_DIMENSION","COMMENT_INPUT_HEIGHT","COMMENT_INPUT_WIDTH","App","_s","_pointerData$pointer$","_pointerData$pointer$2","appRef","viewModeEnabled","setViewModeEnabled","zenModeEnabled","setZenModeEnabled","gridModeEnabled","setGridModeEnabled","blobUrl","setBlobUrl","canvasUrl","setCanvasUrl","exportWithDarkMode","setExportWithDarkMode","exportEmbedScene","setExportEmbedScene","theme","setTheme","isCollaborating","setIsCollaborating","commentIcons","setCommentIcons","comment","setComment","initialStatePromiseRef","promise","current","excalidrawAPI","setExcalidrawAPI","fetchData","res","fetch","imageData","blob","reader","FileReader","readAsDataURL","onload","imagesArray","id","dataURL","result","mimeType","jpg","created","lastRetrieved","resolve","initialData","addFiles","renderTopRightUI","isMobile","children","onSelect","window","alert","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","height","updateScene","sceneData","elements","type","version","versionNonce","isDeleted","fillStyle","strokeWidth","strokeStyle","roughness","opacity","angle","x","y","strokeColor","backgroundColor","width","seed","groupIds","boundElements","locked","link","updated","roundness","value","appState","viewBackgroundColor","onLinkOpen","element","event","nativeEvent","detail","isNewTab","ctrlKey","metaKey","isNewWindow","shiftKey","isInternalLink","startsWith","includes","location","origin","preventDefault","onCopy","getSceneElements","getAppState","files","getFiles","concat","pointerData","setPointerData","onPointerDown","activeTool","pointerDownState","customType","rerenderCommentIcons","commentIconsElements","querySelectorAll","forEach","ele","appstate","sceneX","sceneY","left","offsetLeft","top","offsetTop","onPointerMoveFromPointerDownHandler","clientX","hitElementOffsets","clientY","hitElement","onPointerUpFromPointerDownHandler","removeEventListener","onMove","onUp","setActiveTool","distance","saveComment","renderCommentIcons","Object","values","map","commentIcon","position","zIndex","cursor","touchAction","className","onPointerMove","onPointerUp","addEventListener","src","alt","renderComment","ref","setTimeout","focus","placeholder","onChange","target","onBlur","onKeyDown","key","renderSidebar","Header","renderMenu","DefaultItems","SaveAsImage","Export","Separator","Group","title","Socials","ItemCustom","Help","resetScene","libraryItems","status","updateLibrary","checked","newTheme","bind","display","gap","justifyContent","marginTop","pointer","bottom","padding","transform","background","toggleMenu","api","state","console","info","onPointerUpdate","payload","name","UIOptions","canvasActions","loadScene","onScrollChange","keys","length","svg","querySelector","innerHTML","outerHTML","URL","createObjectURL","canvas","ctx","getContext","font","strokeText","toDataURL","_c","$RefreshReg$"],"sources":["/Users/karandesai/Downloads/excalidraw-forked/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport {\n  exportToCanvas,\n  exportToSvg,\n  exportToBlob,\n  exportToClipboard,\n  Excalidraw,\n  useHandleLibrary,\n  MIME_TYPES,\n  sceneCoordsToViewportCoords,\n  viewportCoordsToSceneCoords,\n  restoreElements,\n  LiveCollaborationTrigger,\n  MainMenu,\n  Footer,\n  Sidebar\n} from \"@excalidraw/excalidraw\";\nimport {\n  AppState,\n  BinaryFileData,\n  ExcalidrawImperativeAPI,\n  ExcalidrawInitialDataState,\n  Gesture,\n  LibraryItems,\n  PointerDownState as ExcalidrawPointerDownState\n} from \"@excalidraw/excalidraw/types/types\";\n\nimport ExampleSidebar from \"./sidebar/ExampleSidebar\";\n\nimport \"./App.scss\";\n//import initialData from \"./initialData\";\n\nimport { NonDeletedExcalidrawElement } from \"@excalidraw/excalidraw/types/element/types\";\nimport { nanoid } from \"nanoid\";\nimport CustomFooter from \"./CustomFooter\";\nimport MobileFooter from \"./MobileFooter\";\nimport {\n  resolvablePromise,\n  withBatchedUpdates,\n  withBatchedUpdatesThrottled,\n  distance2d\n} from \"./utils\";\nimport { ResolvablePromise } from \"@excalidraw/excalidraw/types/utils\";\n\ndeclare global {\n  interface Window {\n    ExcalidrawLib: any;\n  }\n}\n\ntype Comment = {\n  x: number;\n  y: number;\n  value: string;\n  id?: string;\n};\n\ntype PointerDownState = {\n  x: number;\n  y: number;\n  hitElement: Comment;\n  onMove: any;\n  onUp: any;\n  hitElementOffsets: {\n    x: number;\n    y: number;\n  };\n};\n// This is so that we use the bundled excalidraw.development.js file instead\n// of the actual source code\n\nconst COMMENT_ICON_DIMENSION = 32;\nconst COMMENT_INPUT_HEIGHT = 50;\nconst COMMENT_INPUT_WIDTH = 150;\n\nexport default function App() {\n  const appRef = useRef<any>(null);\n  const [viewModeEnabled, setViewModeEnabled] = useState(false);\n  const [zenModeEnabled, setZenModeEnabled] = useState(false);\n  const [gridModeEnabled, setGridModeEnabled] = useState(false);\n  const [blobUrl, setBlobUrl] = useState<string>(\"\");\n  const [canvasUrl, setCanvasUrl] = useState<string>(\"\");\n  const [exportWithDarkMode, setExportWithDarkMode] = useState(false);\n  const [exportEmbedScene, setExportEmbedScene] = useState(false);\n  const [theme, setTheme] = useState(\"light\");\n  const [isCollaborating, setIsCollaborating] = useState(false);\n  const [commentIcons, setCommentIcons] = useState<{ [id: string]: Comment }>(\n    {}\n  );\n  const [comment, setComment] = useState<Comment | null>(null);\n\n  const initialStatePromiseRef = useRef<{\n    promise: ResolvablePromise<ExcalidrawInitialDataState | null>;\n  }>({ promise: null! });\n  if (!initialStatePromiseRef.current.promise) {\n    initialStatePromiseRef.current.promise = resolvablePromise<ExcalidrawInitialDataState | null>();\n  }\n\n  const [\n    excalidrawAPI,\n    setExcalidrawAPI\n  ] = useState<ExcalidrawImperativeAPI | null>(null);\n\n  useHandleLibrary({ excalidrawAPI });\n\n  useEffect(() => {\n    if (!excalidrawAPI) {\n      return;\n    }\n    const fetchData = async () => {\n      const res = await fetch(\"/rocket.jpeg\");\n      const imageData = await res.blob();\n      const reader = new FileReader();\n      reader.readAsDataURL(imageData);\n\n      reader.onload = function () {\n        const imagesArray: BinaryFileData[] = [\n          {\n            id: \"rocket\" as BinaryFileData[\"id\"],\n            dataURL: reader.result as BinaryFileData[\"dataURL\"],\n            mimeType: MIME_TYPES.jpg,\n            created: 1644915140367,\n            lastRetrieved: 1644915140367\n          }\n        ];\n\n        //@ts-ignore\n        initialStatePromiseRef.current.promise.resolve(initialData);\n        excalidrawAPI.addFiles(imagesArray);\n      };\n    };\n    fetchData();\n  }, [excalidrawAPI]);\n\n  const renderTopRightUI = (isMobile: boolean) => {\n    return (\n      <>\n        {!isMobile && (\n          <LiveCollaborationTrigger\n            isCollaborating={isCollaborating}\n            onSelect={() => {\n              window.alert(\"Collab dialog clicked\");\n            }}\n          />\n        )}\n        <button\n          onClick={() => alert(\"This is dummy top right UI\")}\n          style={{ height: \"2.5rem\" }}\n        >\n          {\" \"}\n          Click me{\" \"}\n        </button>\n      </>\n    );\n  };\n\n  const updateScene = () => {\n    const sceneData = {\n      elements: restoreElements(\n        [\n          {\n            type: \"rectangle\",\n            version: 141,\n            versionNonce: 361174001,\n            isDeleted: false,\n            id: \"oDVXy8D6rom3H1-LLH2-f\",\n            fillStyle: \"hachure\",\n            strokeWidth: 1,\n            strokeStyle: \"solid\",\n            roughness: 1,\n            opacity: 100,\n            angle: 0,\n            x: 100.50390625,\n            y: 93.67578125,\n            strokeColor: \"#c92a2a\",\n            backgroundColor: \"transparent\",\n            width: 186.47265625,\n            height: 141.9765625,\n            seed: 1968410350,\n            groupIds: [],\n            boundElements: null,\n            locked: false,\n            link: null,\n            updated: 1,\n            roundness: {\n              type: 3,\n              value: 32\n            }\n          }\n        ],\n        null\n      ),\n      appState: {\n        viewBackgroundColor: \"#edf2ff\"\n      }\n    };\n    excalidrawAPI?.updateScene(sceneData);\n  };\n\n  const onLinkOpen = useCallback(\n    (\n      element: NonDeletedExcalidrawElement,\n      event: CustomEvent<{\n        nativeEvent: MouseEvent | React.PointerEvent<HTMLCanvasElement>;\n      }>\n    ) => {\n      const link = element.link!;\n      const { nativeEvent } = event.detail;\n      const isNewTab = nativeEvent.ctrlKey || nativeEvent.metaKey;\n      const isNewWindow = nativeEvent.shiftKey;\n      const isInternalLink =\n        link.startsWith(\"/\") || link.includes(window.location.origin);\n      if (isInternalLink && !isNewTab && !isNewWindow) {\n        // signal that we're handling the redirect ourselves\n        event.preventDefault();\n        // do a custom redirect, such as passing to react-router\n        // ...\n      }\n    },\n    []\n  );\n\n  const onCopy = async (type: \"png\" | \"svg\" | \"json\") => {\n    if (!excalidrawAPI) {\n      return false;\n    }\n    await exportToClipboard({\n      elements: excalidrawAPI.getSceneElements(),\n      appState: excalidrawAPI.getAppState(),\n      files: excalidrawAPI.getFiles(),\n      type\n    });\n    window.alert(`Copied to clipboard as ${type} successfully`);\n  };\n\n  const [pointerData, setPointerData] = useState<{\n    pointer: { x: number; y: number };\n    button: \"down\" | \"up\";\n    pointersMap: Gesture[\"pointers\"];\n  } | null>(null);\n\n  const onPointerDown = (\n    activeTool: AppState[\"activeTool\"],\n    pointerDownState: ExcalidrawPointerDownState\n  ) => {\n    if (activeTool.type === \"custom\" && activeTool.customType === \"comment\") {\n      const { x, y } = pointerDownState.origin;\n      setComment({ x, y, value: \"\" });\n    }\n  };\n\n  const rerenderCommentIcons = () => {\n    if (!excalidrawAPI) {\n      return false;\n    }\n    const commentIconsElements = appRef.current.querySelectorAll(\n      \".comment-icon\"\n    ) as HTMLElement[];\n    commentIconsElements.forEach((ele) => {\n      const id = ele.id;\n      const appstate = excalidrawAPI.getAppState();\n      const { x, y } = sceneCoordsToViewportCoords(\n        { sceneX: commentIcons[id].x, sceneY: commentIcons[id].y },\n        appstate\n      );\n      ele.style.left = `${\n        x - COMMENT_ICON_DIMENSION / 2 - appstate!.offsetLeft\n      }px`;\n      ele.style.top = `${\n        y - COMMENT_ICON_DIMENSION / 2 - appstate!.offsetTop\n      }px`;\n    });\n  };\n\n  const onPointerMoveFromPointerDownHandler = (\n    pointerDownState: PointerDownState\n  ) => {\n    return withBatchedUpdatesThrottled((event) => {\n      if (!excalidrawAPI) {\n        return false;\n      }\n      const { x, y } = viewportCoordsToSceneCoords(\n        {\n          clientX: event.clientX - pointerDownState.hitElementOffsets.x,\n          clientY: event.clientY - pointerDownState.hitElementOffsets.y\n        },\n        excalidrawAPI.getAppState()\n      );\n      setCommentIcons({\n        ...commentIcons,\n        [pointerDownState.hitElement.id!]: {\n          ...commentIcons[pointerDownState.hitElement.id!],\n          x,\n          y\n        }\n      });\n    });\n  };\n  const onPointerUpFromPointerDownHandler = (\n    pointerDownState: PointerDownState\n  ) => {\n    return withBatchedUpdates((event) => {\n      window.removeEventListener(\"pointermove\", pointerDownState.onMove);\n      window.removeEventListener(\"pointerup\", pointerDownState.onUp);\n      excalidrawAPI?.setActiveTool({ type: \"selection\" });\n      const distance = distance2d(\n        pointerDownState.x,\n        pointerDownState.y,\n        event.clientX,\n        event.clientY\n      );\n      if (distance === 0) {\n        if (!comment) {\n          setComment({\n            x: pointerDownState.hitElement.x + 60,\n            y: pointerDownState.hitElement.y,\n            value: pointerDownState.hitElement.value,\n            id: pointerDownState.hitElement.id\n          });\n        } else {\n          setComment(null);\n        }\n      }\n    });\n  };\n  const saveComment = () => {\n    if (!comment) {\n      return;\n    }\n    if (!comment.id && !comment.value) {\n      setComment(null);\n      return;\n    }\n    const id = comment.id || nanoid();\n    setCommentIcons({\n      ...commentIcons,\n      [id]: {\n        x: comment.id ? comment.x - 60 : comment.x,\n        y: comment.y,\n        id,\n        value: comment.value\n      }\n    });\n    setComment(null);\n  };\n\n  const renderCommentIcons = () => {\n    return Object.values(commentIcons).map((commentIcon) => {\n      if (!excalidrawAPI) {\n        return false;\n      }\n      const appState = excalidrawAPI.getAppState();\n      const { x, y } = sceneCoordsToViewportCoords(\n        { sceneX: commentIcon.x, sceneY: commentIcon.y },\n        excalidrawAPI.getAppState()\n      );\n      return (\n        <div\n          id={commentIcon.id}\n          key={commentIcon.id}\n          style={{\n            top: `${y - COMMENT_ICON_DIMENSION / 2 - appState!.offsetTop}px`,\n            left: `${x - COMMENT_ICON_DIMENSION / 2 - appState!.offsetLeft}px`,\n            position: \"absolute\",\n            zIndex: 1,\n            width: `${COMMENT_ICON_DIMENSION}px`,\n            height: `${COMMENT_ICON_DIMENSION}px`,\n            cursor: \"pointer\",\n            touchAction: \"none\"\n          }}\n          className=\"comment-icon\"\n          onPointerDown={(event) => {\n            event.preventDefault();\n            if (comment) {\n              commentIcon.value = comment.value;\n              saveComment();\n            }\n            const pointerDownState: any = {\n              x: event.clientX,\n              y: event.clientY,\n              hitElement: commentIcon,\n              hitElementOffsets: { x: event.clientX - x, y: event.clientY - y }\n            };\n            const onPointerMove = onPointerMoveFromPointerDownHandler(\n              pointerDownState\n            );\n            const onPointerUp = onPointerUpFromPointerDownHandler(\n              pointerDownState\n            );\n            window.addEventListener(\"pointermove\", onPointerMove);\n            window.addEventListener(\"pointerup\", onPointerUp);\n\n            pointerDownState.onMove = onPointerMove;\n            pointerDownState.onUp = onPointerUp;\n\n            excalidrawAPI?.setActiveTool({\n              type: \"custom\",\n              customType: \"comment\"\n            });\n          }}\n        >\n          <div className=\"comment-avatar\">\n            <img src=\"doremon.png\" alt=\"doremon\" />\n          </div>\n        </div>\n      );\n    });\n  };\n\n  const renderComment = () => {\n    if (!comment) {\n      return null;\n    }\n    const appState = excalidrawAPI?.getAppState()!;\n    const { x, y } = sceneCoordsToViewportCoords(\n      { sceneX: comment.x, sceneY: comment.y },\n      appState\n    );\n    let top = y - COMMENT_ICON_DIMENSION / 2 - appState.offsetTop;\n    let left = x - COMMENT_ICON_DIMENSION / 2 - appState.offsetLeft;\n\n    if (\n      top + COMMENT_INPUT_HEIGHT <\n      appState.offsetTop + COMMENT_INPUT_HEIGHT\n    ) {\n      top = COMMENT_ICON_DIMENSION / 2;\n    }\n    if (top + COMMENT_INPUT_HEIGHT > appState.height) {\n      top = appState.height - COMMENT_INPUT_HEIGHT - COMMENT_ICON_DIMENSION / 2;\n    }\n    if (\n      left + COMMENT_INPUT_WIDTH <\n      appState.offsetLeft + COMMENT_INPUT_WIDTH\n    ) {\n      left = COMMENT_ICON_DIMENSION / 2;\n    }\n    if (left + COMMENT_INPUT_WIDTH > appState.width) {\n      left = appState.width - COMMENT_INPUT_WIDTH - COMMENT_ICON_DIMENSION / 2;\n    }\n\n    return (\n      <textarea\n        className=\"comment\"\n        style={{\n          top: `${top}px`,\n          left: `${left}px`,\n          position: \"absolute\",\n          zIndex: 1,\n          height: `${COMMENT_INPUT_HEIGHT}px`,\n          width: `${COMMENT_INPUT_WIDTH}px`\n        }}\n        ref={(ref) => {\n          setTimeout(() => ref?.focus());\n        }}\n        placeholder={comment.value ? \"Reply\" : \"Comment\"}\n        value={comment.value}\n        onChange={(event) => {\n          setComment({ ...comment, value: event.target.value });\n        }}\n        onBlur={saveComment}\n        onKeyDown={(event) => {\n          if (!event.shiftKey && event.key === \"Enter\") {\n            event.preventDefault();\n            saveComment();\n          }\n        }}\n      />\n    );\n  };\n\n  const renderSidebar = () => {\n    return (\n      <Sidebar>\n        <Sidebar.Header>Custom header!</Sidebar.Header>\n        Custom sidebar!\n      </Sidebar>\n    );\n  };\n\n  const renderMenu = () => {\n    return (\n      <MainMenu>\n        <MainMenu.DefaultItems.SaveAsImage />\n        <MainMenu.DefaultItems.Export />\n        <MainMenu.Separator />\n        <MainMenu.DefaultItems.LiveCollaborationTrigger\n          isCollaborating={isCollaborating}\n          onSelect={() => window.alert(\"You clicked on collab button\")}\n        />\n        <MainMenu.Group title=\"Excalidraw links\">\n          <MainMenu.DefaultItems.Socials />\n        </MainMenu.Group>\n        <MainMenu.Separator />\n        <MainMenu.ItemCustom>\n          <button\n            style={{ height: \"2rem\" }}\n            onClick={() => window.alert(\"custom menu item\")}\n          >\n            custom item\n          </button>\n        </MainMenu.ItemCustom>\n        <MainMenu.DefaultItems.Help />\n\n        {excalidrawAPI && <MobileFooter excalidrawAPI={excalidrawAPI} />}\n      </MainMenu>\n    );\n  };\n  return (\n    <div className=\"App\" ref={appRef}>\n      <h1> Excalidraw Example</h1>\n      <ExampleSidebar>\n        <div className=\"button-wrapper\">\n          <button className=\"update-scene\" onClick={updateScene}>\n            Update Scene\n          </button>\n          <button\n            className=\"reset-scene\"\n            onClick={() => {\n              excalidrawAPI?.resetScene();\n            }}\n          >\n            Reset Scene\n          </button>\n          <button\n            onClick={() => {\n              const libraryItems: LibraryItems = [\n                {\n                  status: \"published\",\n                  id: \"1\",\n                  created: 1,\n                  elements: initialData.libraryItems[1] as any\n                },\n                {\n                  status: \"unpublished\",\n                  id: \"2\",\n                  created: 2,\n                  elements: initialData.libraryItems[1] as any\n                }\n              ];\n              excalidrawAPI?.updateLibrary({\n                libraryItems\n              });\n            }}\n          >\n            Update Library\n          </button>\n\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={viewModeEnabled}\n              onChange={() => setViewModeEnabled(!viewModeEnabled)}\n            />\n            View mode\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={zenModeEnabled}\n              onChange={() => setZenModeEnabled(!zenModeEnabled)}\n            />\n            Zen mode\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={gridModeEnabled}\n              onChange={() => setGridModeEnabled(!gridModeEnabled)}\n            />\n            Grid mode\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={theme === \"dark\"}\n              onChange={() => {\n                let newTheme = \"light\";\n                if (theme === \"light\") {\n                  newTheme = \"dark\";\n                }\n                setTheme(newTheme);\n              }}\n            />\n            Switch to Dark Theme\n          </label>\n        \n          <div>\n            <button onClick={onCopy.bind(null, \"png\")}>\n              Copy to Clipboard as PNG\n            </button>\n            <button onClick={onCopy.bind(null, \"svg\")}>\n              Copy to Clipboard as SVG\n            </button>\n            <button onClick={onCopy.bind(null, \"json\")}>\n              Copy to Clipboard as JSON\n            </button>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              gap: \"1em\",\n              justifyContent: \"center\",\n              marginTop: \"1em\"\n            }}\n          >\n            <div>x: {pointerData?.pointer.x ?? 0}</div>\n            <div>y: {pointerData?.pointer.y ?? 0}</div>\n          </div>\n        </div>\n        <div className=\"excalidraw-wrapper\">\n          <div\n            style={{\n              position: \"absolute\",\n              left: \"50%\",\n              bottom: \"20px\",\n              display: \"flex\",\n              zIndex: 9999999999999999,\n              padding: \"5px 10px\",\n              transform: \"translateX(-50%)\",\n              background: \"rgba(255, 255, 255, 0.8)\",\n              gap: \"1rem\"\n            }}\n          >\n            <button onClick={() => excalidrawAPI?.toggleMenu(\"customSidebar\")}>\n              Toggle Custom Sidebar\n            </button>\n          </div>\n          <Excalidraw\n            ref={(api: ExcalidrawImperativeAPI) => setExcalidrawAPI(api)}\n            initialData={initialStatePromiseRef.current.promise}\n            onChange={(elements, state) => {\n              console.info(\"Elements :\", elements, \"State : \", state);\n            }}\n            onPointerUpdate={(payload: {\n              pointer: { x: number; y: number };\n              button: \"down\" | \"up\";\n              pointersMap: Gesture[\"pointers\"];\n            }) => setPointerData(payload)}\n            viewModeEnabled={viewModeEnabled}\n            zenModeEnabled={zenModeEnabled}\n            gridModeEnabled={gridModeEnabled}\n            theme={theme}\n            name=\"Custom name of drawing\"\n            UIOptions={{ canvasActions: { loadScene: false } }}\n            renderTopRightUI={renderTopRightUI}\n            onLinkOpen={onLinkOpen}\n            onPointerDown={onPointerDown}\n            onScrollChange={rerenderCommentIcons}\n            renderSidebar={renderSidebar}\n          >\n            {excalidrawAPI && (\n              <Footer>\n                <CustomFooter excalidrawAPI={excalidrawAPI} />\n              </Footer>\n            )}\n            {renderMenu()}\n          </Excalidraw>\n          {Object.keys(commentIcons || []).length > 0 && renderCommentIcons()}\n          {comment && renderComment()}\n        </div>\n\n        <div className=\"export-wrapper button-wrapper\">\n          <label className=\"export-wrapper__checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={exportWithDarkMode}\n              onChange={() => setExportWithDarkMode(!exportWithDarkMode)}\n            />\n            Export with dark mode\n          </label>\n          <label className=\"export-wrapper__checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={exportEmbedScene}\n              onChange={() => setExportEmbedScene(!exportEmbedScene)}\n            />\n            Export with embed scene\n          </label>\n          <button\n            onClick={async () => {\n              if (!excalidrawAPI) {\n                return;\n              }\n              const svg = await exportToSvg({\n                elements: excalidrawAPI?.getSceneElements(),\n                appState: {\n                  ...initialData.appState,\n                  exportWithDarkMode,\n                  exportEmbedScene,\n                  width: 300,\n                  height: 100\n                },\n                files: excalidrawAPI?.getFiles()\n              });\n              appRef.current.querySelector(\".export-svg\").innerHTML =\n                svg.outerHTML;\n            }}\n          >\n            Export to SVG\n          </button>\n          <div className=\"export export-svg\"></div>\n\n          <button\n            onClick={async () => {\n              if (!excalidrawAPI) {\n                return;\n              }\n              const blob = await exportToBlob({\n                elements: excalidrawAPI?.getSceneElements(),\n                mimeType: \"image/png\",\n                appState: {\n                  ...initialData.appState,\n                  exportEmbedScene,\n                  exportWithDarkMode\n                },\n                files: excalidrawAPI?.getFiles()\n              });\n              setBlobUrl(window.URL.createObjectURL(blob));\n            }}\n          >\n            Export to Blob\n          </button>\n          <div className=\"export export-blob\">\n            <img src={blobUrl} alt=\"\" />\n          </div>\n\n          <button\n            onClick={async () => {\n              if (!excalidrawAPI) {\n                return;\n              }\n              const canvas = await exportToCanvas({\n                elements: excalidrawAPI.getSceneElements(),\n                appState: {\n                  ...initialData.appState,\n                  exportWithDarkMode\n                },\n                files: excalidrawAPI.getFiles()\n              });\n              const ctx = canvas.getContext(\"2d\")!;\n              ctx.font = \"30px Virgil\";\n              ctx.strokeText(\"My custom text\", 50, 60);\n              setCanvasUrl(canvas.toDataURL());\n            }}\n          >\n            Export to Canvas\n          </button>\n          <div className=\"export export-canvas\">\n            <img src={canvasUrl} alt=\"\" />\n          </div>\n        </div>\n      </ExampleSidebar>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}